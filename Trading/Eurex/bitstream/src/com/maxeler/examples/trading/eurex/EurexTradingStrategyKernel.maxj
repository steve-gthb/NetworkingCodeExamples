package com.maxeler.examples.trading.eurex;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLite;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLite.IO.PushInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLite.IO.PushOutput;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType.StructFieldType;
import com.maxeler.maxcompiler.v2.managers.DFEManager;
import com.maxeler.mpt.core.internal.orderentry.Message;
import com.maxeler.mpt.core.orderentry.OrderEntryLinkType;
import com.maxeler.mpt.core.protocols.fix.FIXFrameFormat;
import com.maxeler.mpt.eurex.eobi.EurexEobiConfiguration;
import com.maxeler.mpt.eurex.eti.EurexEtiConfiguration;
import com.maxeler.mpt.eurex.internal.eti.EurexField;
import com.maxeler.networking.v1.framed_kernels.FrameFormat;
import com.maxeler.networking.v1.framed_kernels.FramedLinkType;

public class EurexTradingStrategyKernel extends KernelLite {
	public EurexTradingStrategyKernel(DFEManager owner, String name, FramedLinkType mdLinkType, OrderEntryLinkType orderLinkType, EurexEobiConfiguration eobiConfig, EurexEtiConfiguration etiConfig) {
		super(owner, name);

		// The incoming and outgoing link types, and supported messages
		owner.logMsg("--- STRATEGY ---");
		owner.logMsg("Market data link format: " +eobiConfig.getMarketDataOutputFormat().getStructType().getNumberOfFields());
		for(String s : eobiConfig.getMarketDataOutputFormat().getStructType().getFieldNames()) {
			owner.logMsg("> " + s + " is " + eobiConfig.getMarketDataOutputFormat().getStructType().getTypeForField(s));
		}

		owner.logMsg("----------------");
		FIXFrameFormat<EurexField> msgFormat = etiConfig.getOrderInputFormat().getImpl();
		for(Message<EurexField>msg : msgFormat.getMsgs()) {
			owner.logMsg("Message (" + msg.getMsgDef() + "): " + msg.getMsgDef().getFields().size() + " fields");
			for(EurexField f : msg.getMsgDef().getFields()) {
				owner.logMsg("> " + f.getTag().getName() + ": " + f.getType());
			}
		}

		owner.logMsg("----------------");
		FrameFormat frameFormat = etiConfig.getOrderInputFormat().getFrameFormat();
		owner.logMsg("Order entry link format: " + frameFormat.getFieldNames().size() + " fields");
		StructFieldType orderFields[] = new StructFieldType[frameFormat.getFieldNames().size()];
		int i = 0;
		for(String s : frameFormat.getFieldNames()) {
			owner.logMsg("> " + i + ": " + s + " is " + frameFormat.getFieldInfo().get(s).getType());
			StructFieldType bla = DFEStructType.sft(s, frameFormat.getFieldInfo().get(s).getType());
			orderFields[i++] = bla;
		}

		owner.logMsg("----------------");

		// ==========================================================================

		// inputs are push so input is signalled with a valid bit, and output is indicated by setting valid
		PushInput<DFEStruct> mdIn = io.pushInput("mdIn", mdLinkType.getDFEStructType(), 1);
		PushOutput<DFEStruct> orderOut = io.pushOutput("orderOut", orderLinkType.getDFEStructType(), 1);
		mdIn.stall <== orderOut.stall; // if ETI handler stalls then it's passed back to EOBI handler, kernel cannot stall

		DFEStruct mdUpdate = eobiConfig.getMarketDataOutputFormat().getStructType().unpack((DFEVar)mdIn.data[orderLinkType.getData()]);
		DFEVar mdValid = mdIn.valid;

		DFEVar buyValid = getTopOfBook(mdUpdate, BookSide.Buy, BookEntry.Valid);
		DFEVar sellValid = getTopOfBook(mdUpdate, BookSide.Sell, BookEntry.Valid);
		DFEVar orderPrice = buyValid
			? getTopOfBook(mdUpdate, BookSide.Buy, BookEntry.Price)
				: getTopOfBook(mdUpdate, BookSide.Sell, BookEntry.Price);

		DFEVar orderQuantity = buyValid
				? getTopOfBook(mdUpdate, BookSide.Buy, BookEntry.Quantity)
						: getTopOfBook(mdUpdate, BookSide.Sell, BookEntry.Quantity);

		DFEVar sendOrder = mdValid & (buyValid | sellValid);

		DFEVar clOrdId = control.count.makeCounter(control.count.makeParams(64)
				.withEnable(sendOrder)
				.withInitValue(0)
				).getCount();

		// create the new order
		DFEStructType newOrderStructType = new DFEStructType(orderFields);
		DFEStruct newOrder = newOrderStructType.newInstance(this);

		newOrder["SenderSubID"] <== constant.var(dfeUInt(32), 123);
		newOrder["Price"] <== (constant.var(dfeRawBits(24), 0) # orderPrice # constant.var(dfeRawBits(8), 0)).cast(dfeInt(64));
		newOrder["ClOrdID"] <== clOrdId;
		newOrder["OrderQty"] <== orderQuantity;
		newOrder["SimpleSecurityID"] <== ((DFEVar)mdUpdate["SecurityID"]).slice(0, 32).cast(dfeUInt(32));
		newOrder["Side"] <== buyValid ? constant.var(dfeUInt(8), 2) : constant.var(dfeUInt(8), 1);
		newOrder["PriceValidityCheckType"] <== constant.var(dfeUInt(8), 0); // no check
		newOrder["TimeInForce"] <== constant.var(dfeUInt(8), 0); // day
		newOrder["TradingCapacity"] <== constant.var(dfeUInt(8), 1); // customer
		newOrder["NetworkMsgID"] <== constant.var(dfeUInt(64), 0);
		newOrder["RegulatoryID"] <== constant.var(dfeUInt(32), 456); // unique to trading strategy

		newOrder["Pad2"] <== constant.var(dfeRawBits(16), 0);
		newOrder["Pad5"] <== constant.var(dfeRawBits(40), 0);


		// the link fields for the framed stream to eti handler
		orderOut.valid <== sendOrder;
		orderOut.data[orderLinkType.getSOF()] <== sendOrder;
		orderOut.data[orderLinkType.getEOF()] <== sendOrder;
		orderOut.data[orderLinkType.getMod()] <== constant.var(dfeUInt(orderLinkType.getDFEStructType().getTypeForField(orderLinkType.getMod()).getTotalBits()), 0);
		orderOut.data[orderLinkType.getSessionID()] <== constant.var(dfeUInt(orderLinkType.getDFEStructType().getTypeForField(orderLinkType.getSessionID()).getTotalBits()), 0);
		orderOut.data[orderLinkType.getData()] <== newOrder.pack();
	}

	enum BookEntry {
		Price ("Price"),
		Valid ("IsValid"),
		Quantity ("Quantity");

		private final String name;

		private BookEntry(String name) {
			this.name = name;
		}

		public String getName() {
			return name;
		}
	}

	enum BookSide {
		Buy("BUY"),
		Sell("SELL");

		private final String name;

		private BookSide(String name) {
			this.name = name;
		}

		public String getName() {
			return name;
		}
	}

	private DFEVar getTopOfBook(DFEStruct mdUpdate, BookSide side, BookEntry what) {
		return mdUpdate["A_" + side.getName() + "_" + what.getName() + "_01"];
	}

}
